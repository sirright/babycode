高级函数就是指以函数作为函数的参数,比如:
function cal(a,b,f){
	return f(a)+f(b);
}
cal(1,-2,Math.abs)

arr的map方法:arr.map(function(){})
function pow(x) {
    return x * x;
}
var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
var results = arr.map(pow); // [1, 4, 9, 16, 25, 36, 49, 64, 81]
arr.map(String)		//将arr数组转换为字符串
arr的map方法不改变原有数组

arr的reduce方法:arr.reduce(function(){})
该方法传入函数参数必须是两个,计算方式为f(f(1,2),3)........
var arr=[1,2,3,4,5]
function add(){
	return a+b;
}
arr.reduce(add)

arr过滤器
arr.filter:用于把某些元素过滤掉,返回剩下的元素
arr.filter(f(){})	//filter把传入的函数作用于每个元素,根据结果true或false取舍

排序算法
arr.sort
对于arr中任意两个元素x,y.若认为x<y则返回-1,x==y,则返回0,x>y则返回1.大的排后面.
对字符串进行排序时,根据字符串的ASCII码进行排序,
对数字进行排序时,默认把所有元素先转换为String再排序.
sort方法会直接对数组进行修改.返回的结果还是原来的数组

闭包(Closure):外部函数(内部函数)
内部函数可以引用外部函数的参数和局部变量,
当调用外部函数返回内部函数时,相关参数和变量都保存在返回的函数中
当调用外部函数时,每次调用都会返回一个新的函数.返回函数调用的结果互不影响
返回闭包时,返回函数不要引用任何循环变量,或者后续会发生改变的变量.
若是一定要引用循环变量,再创建一个函数,用该函数的参数绑定变量当前循环变量的值
利用闭包可以封装一个私有变量
function create_counter(initial) {
    var x = initial || 0;
    return {
        inc: function () {
            x += 1;
            return x;
        }
    }
}	//比如变量x,被封装起来后,外部函数无法访问
闭包就是一个携带状态的函数,并且可以完全对外隐藏起来.
function makepow(n){
    return function(x){
        return Math.pow(x,n);
    }
}

箭头函数:
jsES6规范新增了箭头函数(Arrow Function)
定义:
x => x*x;
等同于
function(x){
	return x*x;
}
箭头函数相当于匿名函数.
匿名函数:
arr.push((function(x){})(3));		//创建一个匿名函数并立即执行
箭头函数又两种格式:一种如上,一种如下
x=>{
	if(x>0){
		return x*x;
	}else{
		return -x*x;
	}
}
如果参数不止一个,用()括起来,(x,y)=>{}
无参数:()=>{}
可变参数:(x,y,...rest)=>{}
若是返回一个对象:
x=>{foo:x}	//因为与函数体无法区分,所以是错的
x=>({foo:x})	//正确写法		

箭头函数和匿名函数的区别:
箭头函数内部的this是词法作用域,由上下文确定.
有了箭头函数,hack写法 var that=this就不再需要了

生成器
generator是ES6规范引入的西您的数据类型.
generator由function*定义,并且除了return外还可以使用yield返回多次
比如写一个斐波那契数列
function fib(max){
	var
		a=0,
		b=1,
		arr=[0,1];
	while(arr.length<max){
		[a,b]=[b,a+b];
		arr.push(b);
	}
	return arr;
}
用了yield以后
function* fib(max){
	var 
		a=0,
		b=1,
		n=0;
	while(n<max){
		yield a;
		[a,b]=[b,a+b];
		n++;
	}
	return;
}
调用一个generator和调用函数不一样,fib(5)仅仅只是创建了一个generator对象.
调用方法:
1.不断调用generator对象next方法,每次遇到yield返回一个对象
{value:x,done:true/false}并暂停,done表示generator是否已经执行结束,
若为true,则value就是return 返回值
var f = fib(5);
	f.next()	//{value:0,done:false}
	f.next()	//{value:1,done:false}
	..
	f.next()	//第五次调用{value:5,done:true}
2.用for...of循环迭代generator对象.
for(var x of fib(10)){
	console.log(x);		//依次输出0,1,1,2,3....
}

用generator可以实现需要用面向对象才能实现的功能,例如:用一个对象来保存状态
var fib = {
    a: 0,
    b: 1,
    n: 0,
    max: 5,
    next: function () {
        var
            r = this.a,
            t = this.a + this.b;
        this.a = this.b;
        this.b = t;
        if (this.n < this.max) {
            this.n ++;
            return r;
        } else {
            return undefined;
        }
    }
};






