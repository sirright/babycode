javascript用{}表示一个对象
属性名是一个有效变量名时,访问通过对象.属性来完成.
如:
var xiaohong = {
    name: '小红',
    'middle-school': 'No.1 Middle School'
};
xiaohong.name 	//'小红'
'middle-school'不是一个有效的变量名,访问方式如下:
xiaohong['middle-school'];		// 'No.1 Middle School'
实际上,js对象的所有属性都是字符串,不过属性对应的值可以是任意数据类型.
访问一个不存在的属性时,返回undefined
对象的属性可以自由添加.
比如me本来没有age属性
me.age=18;		//age就成为了me的属性且值为18
delete me.age	//删除me的age属性
delete me['name']	//另一种删除方式
delete me.teacher 	//删除一个不存在的属性也不会报错
'name' in me 	//检测me对象中是否存在name属性,存在返回true,不存在返回false,若存在,这属性不一定是me的,也可能是由继承而来
me.hasOwnProperty('name')	//判断一个name属性是不是me对象自己的属性

用(typeof 元素) 获取对象的类型(返回的是字符串)
typeof 123; // 'number'
typeof NaN; // 'number'
typeof 'str'; // 'string'
typeof true; // 'boolean'
typeof undefined; // 'undefined'
typeof Math.abs; // 'function'
typeof null; // 'object'
typeof []; // 'object'
typeof {}; // 'object'
可见用typeof无法区分null,Array和{}

包装对象:
包装对象用new创建
var n = new Number(123);
var a = new Boolean(true);
var b = new String('str');
包装对象的类型是object类型,与原始值用===比较会返回false
如果在使用NUmber,Boolean,string时没使用new,创建出来的函数将不是包装类型
var n = Number('123'); // 123，相当于parseInt()或parseFloat()
typeof n; // 'number'
var s = String(123.45); // '123.45'
typeof s; // 'string'

不要使用new Number()、new Boolean()、new String()创建包装对象；
用parseInt()或parseFloat()来转换任意类型到number；
用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；
通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；
typeof操作符可以判断出number、boolean、string、function和undefined；
判断Array要使用Array.isArray(arr)；
判断null请使用myVar === null；
判断某个全局变量是否存在用typeof window.myVar === 'undefined'；
函数内部判断某个变量是否存在用typeof myVar === 'undefined'。




