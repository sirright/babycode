正则表达式RegExp
\d匹配一个数字
\w匹配一个字母或数字
\s匹配一个空格(也包括Tab等空白符)
. 可以匹配任意字符
*表示任意个字符,
+表示至少一个字符
?表示0个或1个字符
{n}表示n个字符
{n,m}表示n到m个字符
^表示行的开头:^\d表示必须以数字开头
$表示行的结束:\d$表示必须以数字结束
比如:
'00\d'匹配'007'
'\d\d\d'匹配'010'
'js.'匹配'jsp'、'jss'、'js!'
在正则表达式中,

[0-9a-zA-Z\_]可以匹配一个数字、字母或者下划线
[0-9a-zA-Z\_]+可以匹配至少由一个数字、字母或者下划线组成的字符串
[a-zA-Z\_\$][0-9a-zA-Z\_\$]{0, 19}
A|B可以匹配A或B

正则表达式的创建
1.var reg1= /ABC\-001/;
2.var reg2=new RegExp('ABC\\-001');

RrgExp对象的test方法用于测试给定的字符串是否符合条件.
var re = /^\d{3}\-\d{5}$/
re.test('010-12345'); // true

exec方法用于匹配结果后分组
var reg1 = /^(\d{3})\-(\d{3,8})$/ 
reg1.exec('101-1234')	//['101-1234','101','1234']
reg1.exec('12314')		//null

正则匹配默认是贪婪匹配,就是匹配尽可能多的字符
var re = /^(\d+)(0*)$/;
re.exec('102300'); // ['102300', '102300', '']

若要采用非贪婪匹配法,只需要在\d+后面加个?就行了
var re = /^(\d+?)(0*)$/;
re.exec('102300'); // ['102300', '1023', '00']

正则表达式后缀 g表示全局搜索,i表示武略大小写,m表示执行多行匹配
var reg = /test/g
var reg = new RegExp('test','g')
全局匹配可以多次执行exec()方法来搜索一个匹配的字符串.
指定g标志后,每次运行exec(),正则表达式本身会更新lastIndex属性,表示上次匹配到的最后索引.
var s = 'JavaScript, VBScript, JScript and ECMAScript';
var re=/[a-zA-Z]+Script/g;
re.exec(s); // ['JavaScript']
re.lastIndex; // 10
re.exec(s); // ['VBScript']
re.lastIndex; // 20
因为全局匹配类似搜索,因此不能使用/^...$/那样只会最多匹配一次.




